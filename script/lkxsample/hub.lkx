// import path from C workdir
[string] _lkx_import_path_ =
[
  "script/",
  "google/3rd/",
  "tesla/lkxlib/"
]

import "lkxsample/school/school.lkx"

struct Student {
  int64 id;
  string name;
  {int64:{mo string:double}} nearMap = new();
  {string:{o int64:[string]}} arrmap = {
    "fewfwef":{232:["ooooo","jjj",  "jfwefk"]},
    "jjj": {993 : ["helow rold"]},
  }
}

//variable declaration
[School] all_schools = new()
Student tallest_student

//called by C host
shared void add_school_data(CSchool cschool)
{
  School school = new()
  school.cschool = cschool
  school.id = cschool.id()
  school.name = ("school no.%d", school.id)

  //6 grades
  for(int64 i = 0; i < 6; ++i)
  {
    Grade grade
    grade.id = i + 1
    grade.name = ("grade no.%u", grade.id)
    school.grades.push(grade)

    //4 classes per grade
    for(int64 i = 0; i < 4; ++i)
    {
      Class cls
      cls.id = i + 1
      cls.name = ("class no.%u", cls.id)
      grade.classes.push(cls)

      //35 students per class
      for(int64 i = 0; i < 35; ++i)
      {
        Student student
        student.height = random(130, 220)
        student.id = i + 1
        student.name = ("student no.%u", student.id)       
        cls.students.push(student) 
      }
    }
  }

  all_schools.push(school)
}

int main()
{
  int64 tallest_cm = 0
  foreach(auto school in all_schools)
  {
    Student student = school_find_tallest_student(school)

    if(student.height <= tallest_cm)
    {
      continue
    }

    tallest_cm = student.height
    tallest_student = student
  }

  printf("tallest_student id: %u, name: %s\n", tallest_student.id, tallest_student.name)
  return 0
}

internal void _lkx_hot_reloading_()
{
  _lkx_remain_unchanged_ = [all_schools,tallest_student]
}

internal void _lkx_post_hot_reloading_()
{
  
}
